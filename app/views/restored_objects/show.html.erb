  <div id="editor"></div>
  <div id="inform"></br>
            <div id="bdaText">
                PLY viewer
            </div>
            <div id="bdaText">
                <ul>
                    <li class="icons_column"><button type="button" onclick="allParts()" class="btn btn-primary max_size">All pieces</button></li>
                    <li class="icons_column"><button type="button" onclick="goodParts()" class="btn btn-primary max_size">No missing</button></li>
                    <li class="icons_column"><button type="button" onclick="faltantParts()" class="btn btn-primary max_size">Missing</button></li>
                </ul>
            </div>
        </div>
        <div id="fixed-div-invisible">
        </div>
        <div id="fixed-div">
            <ul>
                <li class="icons_column" onclick="rule()"><i class="fas fa-camera-retro fa-5x"></i></li>
                <li class="icons_column" onclick="rule()"><i class="fas fa-question-circle fa-5x"></i></li>
                <li class="icons_column" onclick="wireframeSet ()"><i class="fas fa-cube fa-5x"></i></i></li>
            </ul>
        </div>
        <div id="camera">
          <div class="all_in_line">
            <i class="far fa-caret-square-down fa-5x" onclick="down_camera()"></i>
          </div>
          <div onclick="up_camera()" class="all_in_line">
            <i class="far fa-caret-square-up fa-5x"></i>
          </div>
          <div class="all_in_line">
            <i class="far fa-caret-square-left fa-5x" onclick="left_camera()"></i>
          </div>
        </div>
        <div id="camerainvisible">
        </div>
  </div>
  <script type="text/javascript" src="/js/three.min.js"></script>
  <script type="text/javascript" src="/js/PLYLoader.js"></script>
  <script type="text/javascript" src="/js/OrbitControls.js"></script>

  <script>
  //var arrow     = null;
  var selection = null;
  var wireframeMode = false;
  var mouse     = new THREE.Vector2();

  var object = new THREE.Object3D();
  var pieces = [];

  var object_f = new THREE.Object3D();
  var faltants = [];

  var camera    = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

  var renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true
  });

  var scene = new THREE.Scene();
  scene.add(object);
  scene.add(object_f);

  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.autoClear = false;
  renderer.setClearColor(0xffffff, 0.0);

  $('#editor').append(renderer.domElement);

  // raycaster
  raycaster = new THREE.Raycaster();

  // selection material
  selectionMaterial = new THREE.MeshLambertMaterial({
      color: 0x40e0d0
    });
  // normal material
  unselectedMAterial = new THREE.MeshLambertMaterial({
      color: 0xcdb380
    });
  // wireframe material
  wireframeMaterial = new THREE.MeshBasicMaterial({
    color: 0xe8ddcb,
    wireframe: true
   });
   // wireframe material
  wireframeMaterialSelected = new THREE.MeshBasicMaterial({
    color: 0x40e0d0,
    wireframe: true
   });

  // mousemove
  window.addEventListener( 'mousemove', onmousemove, false );
  function onmousemove(event) {
      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
  };

  // camera
  camera.position.z = 30;
  camera.lookAt(new THREE.Vector3(0, 0, 0));
  scene.add(camera);

  var clock = new THREE.Clock();

  // orbit, pan, zoom controls
  controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.enableZoom = true;
  controls.addEventListener('change', function() {
      return render;
  });

  // lightning
  directionalLight = new THREE.DirectionalLight(0xffaa44, 0.8, 100);
  directionalLight.position.set(10, 5, 10);
  directionalLight.castShadow = true;
  scene.add(directionalLight);

  light = new THREE.AmbientLight(0xffffff, 0.5);
  light.position.set(5, 1, 1);
  light.castShadow = true;
  scene.add(light);

  window.addEventListener( 'resize', onWindowResize, false );

  function onWindowResize(){
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    camera.lookAt(scene.position);
    renderer.setSize(window.innerWidth, window.innerHeight);
    raycaster.setFromCamera(mouse, camera);
    renderer.render(scene, camera);
  };

  this.onMouseMove = function(event) {
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    return mouse.y = -(event.clientY / window.innerHeight) * 2 + 1.15;
  };

  var render = function() {
    requestAnimationFrame(render);
    var delta = clock.getDelta();
    object.rotation.y += delta/4;
    object_f.rotation.y += delta/4;
    renderer.render(scene, camera);
  };

  render();

  var loader = new THREE.PLYLoader();

  var rotate_m = new THREE.Matrix4();
  rotate_m.set(
                1,  0, 0, 0,
                0,  0, 1, 0,
                0, -1, 0, 0,
                0,  0, 0, 1
  );

  var w = new Array(gon.pieces.length);

  function startWorker() {
      console.log(gon.pieces)
      for(let index = 0; index < gon.pieces.length; index++){
        console.log(index)
        set_worker(index);
      }
  }

  function set_worker(index){
      if(typeof(Worker) !== "undefined") {
          w[index] = new Worker('/js/parseModel.js');
          console.log(index)
          w[index].addEventListener("message", function (event) {
            var abuffer = event.data.buffer;
            var vertices = new Float32Array(abuffer);
            var buffer = new THREE.BufferAttribute(vertices, 3);

            var material = new THREE.MeshLambertMaterial( { color: 0xcdb380 } );
            var geo = new THREE.BufferGeometry();
            geo.addAttribute('position',  buffer);

            geo.computeVertexNormals();
            var child = new THREE.Mesh(geo, material);
            child.scale.multiplyScalar( 0.01 );
            child.rotation.y += Math.PI;
            child.castShadow = true;
            child.receiveShadow = true;
            child.scale.multiplyScalar( 1000 );

            var scaleMatrix = new THREE.Matrix4();
            var matrix = new THREE.Matrix4();
            //console.log(gon.matrices[index].trim().split(' ').filter(function(val) { return val.length != 0; }));
            scaleMatrix.fromArray(gon.matrices[index].trim().split(' ').filter(function(val) { return val.length != 0; })).transpose();
            scaleMatrix.multiplyMatrices ( rotate_m, scaleMatrix );

            child.geometry.applyMatrix(scaleMatrix);
            child.geometry.verticesNeedUpdate = true;

            if( gon.missings[index] ){
              pieces.push(child);
              object.add(child);
            } else {
              faltants.push(child);
              object_f.add(child);
            }
          }, false);
          w[index].postMessage(gon.pieces[index]);

      } else {
          console.log("Sorry, your browser does not support Web Workers...");
      }
  }

  renderer.domElement.addEventListener('mousedown', function(event) {
    var intersects, selected;
    event.preventDefault();
    raycaster.setFromCamera(mouse, camera);
    intersects = raycaster.intersectObjects(pieces.concat(faltants));
    if (intersects.length > 0) {
      if(!wireframeMode){
        if(selection !== null){
          selection.material = unselectedMAterial;
        }
        selected = intersects[0].object;
        selected.material = selectionMaterial;
        selection = selected;
      } else {
        if(selection !== null){
          selection.material = wireframeMaterial;
        }
        selected = intersects[0].object;
        selected.material = wireframeMaterialSelected;
        selection = selected;
      }
    }
  });

  startWorker();

  function goodParts(){
    allParts();
    scene.remove(object_f);
  }

  function allParts(){
    scene.add(object);
    scene.add(object_f);
  }

  function faltantParts(){
    allParts();
    scene.remove(object);
  }

  function up_camera(){
    camera.position.z = 30;
    camera.position.y = 0;
    camera.position.x = 0;
    camera.lookAt(new THREE.Vector3(0, 0, 0));
  }

  function down_camera(){
    camera.position.z = 0;
    camera.position.y = 30;
    camera.position.x = 0;
    camera.lookAt(new THREE.Vector3(0, 0, 0));
  }

  function left_camera(){
    camera.position.z = 0;
    camera.position.y = 0;
    camera.position.x = 30;
    camera.lookAt(new THREE.Vector3(0, 0, 0));
  }

  function rule() {
    console.log("Cosas");
  }

  function wireframeSet(){
    var index;
    var allpieces =  pieces.concat(faltants);
    for(index = 0; index < allpieces.length; index++) {
        if(!wireframeMode){
          allpieces[index].material = wireframeMaterial;
        } else {
          allpieces[index].material = unselectedMAterial;
        }
    }
    wireframeMode = !wireframeMode;
  }

  </script>
